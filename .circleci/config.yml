# CircleCI configuration file

version: 2
jobs:
  composer:
    docker:
      - image: circleci/php:cli

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "composer.json" }}
            - v1-dependencies-
      - run: composer install -n --prefer-dist --ignore-platform-reqs
      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      # run tests
      - run: composer validate
  
  docker-compose:
    docker:
      - image: circleci/php:cli
        user: root
        environment:
          COMPOSER_ALLOW_SUPERUSER: 1
          COMPOSE_PROJECT_NAME: circleci

    steps:
      - checkout
      - setup_remote_docker

      # build docker compose project and setup network
      - run:
          name: Update codebase to follow CI configuration
          command: |
            sed -i -e "/###/d" docker-compose.yml
      - run: docker network prune -f && docker network inspect amazeeio-network >/dev/null || docker network create amazeeio-network
      - run: docker-compose up -d

      # ensure DB is up prior to install
      - run:
          name: Check mariadb is responsive with dockerize
          command: docker run --net circleci_default jwilder/dockerize dockerize -wait tcp://mariadb:3306 -timeout 1m
      
      # install Drupal demo_umami profile
      - run: 
          name: Ensure all modules are installed and test install Drupal
          command: |
            docker-compose exec cli composer install
            docker-compose exec cli drush si -y demo_umami --site-name="Lagoon CI Umami"
      
      # check that the site is installed
      - run: 
          name: Check page title matches site-name
          command: docker-compose exec cli curl -Ls http://nginx:8080 | grep -i "Lagoon CI Umami"
      
      # perform some informational checks
      - run:
          name: Get environment, site and module version status
          command: |
            docker-compose exec cli php -v
            docker-compose exec cli drush sqlq 'SHOW VARIABLES LIKE "%version%";'
            docker-compose exec cli drush st
            docker-compose exec cli drush pml

  # lagoon-deploy:
  # @todo - test deployment to lagoon.

workflows:
  version: 2
  commit:
    jobs:
      - composer
      - docker-compose
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - 8.x
    jobs:
      - composer
      - docker-compose
